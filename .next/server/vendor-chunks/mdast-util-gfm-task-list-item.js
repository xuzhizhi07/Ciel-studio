"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/mdast-util-gfm-task-list-item";
exports.ids = ["vendor-chunks/mdast-util-gfm-task-list-item"];
exports.modules = {

/***/ "(ssr)/./node_modules/mdast-util-gfm-task-list-item/lib/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mdast-util-gfm-task-list-item/lib/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   gfmTaskListItemFromMarkdown: () => (/* binding */ gfmTaskListItemFromMarkdown),\n/* harmony export */   gfmTaskListItemToMarkdown: () => (/* binding */ gfmTaskListItemToMarkdown)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devlop */ \"(ssr)/./node_modules/devlop/lib/development.js\");\n/* harmony import */ var mdast_util_to_markdown__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! mdast-util-to-markdown */ \"(ssr)/./node_modules/mdast-util-to-markdown/lib/handle/index.js\");\n/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */ \n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM task\n * list items in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM task list items.\n */ function gfmTaskListItemFromMarkdown() {\n    return {\n        exit: {\n            taskListCheckValueChecked: exitCheck,\n            taskListCheckValueUnchecked: exitCheck,\n            paragraph: exitParagraphWithTaskListItem\n        }\n    };\n}\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM task list\n * items in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM task list items.\n */ function gfmTaskListItemToMarkdown() {\n    return {\n        unsafe: [\n            {\n                atBreak: true,\n                character: \"-\",\n                after: \"[:|-]\"\n            }\n        ],\n        handlers: {\n            listItem: listItemWithTaskListItem\n        }\n    };\n}\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */ function exitCheck(token) {\n    // Weâ€™re always in a paragraph, in a list item.\n    const node = this.stack[this.stack.length - 2];\n    (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(node.type === \"listItem\");\n    node.checked = token.type === \"taskListCheckValueChecked\";\n}\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */ function exitParagraphWithTaskListItem(token) {\n    const parent = this.stack[this.stack.length - 2];\n    if (parent && parent.type === \"listItem\" && typeof parent.checked === \"boolean\") {\n        const node = this.stack[this.stack.length - 1];\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(node.type === \"paragraph\");\n        const head = node.children[0];\n        if (head && head.type === \"text\") {\n            const siblings = parent.children;\n            let index = -1;\n            /** @type {Paragraph | undefined} */ let firstParaghraph;\n            while(++index < siblings.length){\n                const sibling = siblings[index];\n                if (sibling.type === \"paragraph\") {\n                    firstParaghraph = sibling;\n                    break;\n                }\n            }\n            if (firstParaghraph === node) {\n                // Must start with a space or a tab.\n                head.value = head.value.slice(1);\n                if (head.value.length === 0) {\n                    node.children.shift();\n                } else if (node.position && head.position && typeof head.position.start.offset === \"number\") {\n                    head.position.start.column++;\n                    head.position.start.offset++;\n                    node.position.start = Object.assign({}, head.position.start);\n                }\n            }\n        }\n    }\n    this.exit(token);\n}\n/**\n * @type {ToMarkdownHandle}\n * @param {ListItem} node\n */ function listItemWithTaskListItem(node, parent, state, info) {\n    const head = node.children[0];\n    const checkable = typeof node.checked === \"boolean\" && head && head.type === \"paragraph\";\n    const checkbox = \"[\" + (node.checked ? \"x\" : \" \") + \"] \";\n    const tracker = state.createTracker(info);\n    if (checkable) {\n        tracker.move(checkbox);\n    }\n    let value = mdast_util_to_markdown__WEBPACK_IMPORTED_MODULE_1__.handle.listItem(node, parent, state, {\n        ...info,\n        ...tracker.current()\n    });\n    if (checkable) {\n        value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check);\n    }\n    return value;\n    /**\n   * @param {string} $0\n   * @returns {string}\n   */ function check($0) {\n        return $0 + checkbox;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mdast-util-gfm-task-list-item/lib/index.js\n");

/***/ })

};
;